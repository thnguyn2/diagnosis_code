%This program extracts the histogram of textons in for the regions that may
%contain the basal cells
%Author: Tan H. Nguyen
%Last update: May 5th, 2015
%University of Illinois at Urbana-Chamapaign
    clc;
    clear all;
    close all;
    datafolder = 'H:\TMA_cores_and_diagnosis\diagnosis_of_vicky\';
    addpath('..\support');
    g3folder =strcat(datafolder,'g3\');
    nmfolder = strcat(datafolder,'nm\');
    hgpfolder =strcat(datafolder,'hgp\');
    bphfolder = strcat(datafolder,'bph\');

    texton_hist_folder = 'H:\TMA_cores_and_diagnosis\texdir\'
    g3files = dir(strcat(g3folder,'*_lbl_*g3.tif'));
    nmfiles = dir(strcat(nmfolder,'*_lbl_*nm.tif'));
    hgpfiles = dir(strcat(hgpfolder,'*_lbl_*hgp.tif'));
    bphfiles = dir(strcat(bphfolder,'*_lbl_*bph.tif'));
    g3names = cell(0,1);
    nmnames = cell(0,1);
    hgpnames = cell(0,1);
    bphnames = cell(0,1);
    n3 = size(g3files,1); %Number of G3 samples
    nm = size(nmfiles,1); %Number of nm samples
    nhgp = size(hgpfiles,1); %Number of G3 samples
    nbph = size(bphfiles,1); %Number of nm samples
    param.smallestlumenarea=5000;
    param.minglandarea = 5000;
    ntextons = 50;
    
    stromawidtharr = [150];
    re_obtain_histogram_data = 0;
    nstromawidth = length(stromawidtharr);
    normaltexthist = zeros(0,ntextons);
    g3texthist = zeros(1,ntextons);
    bphtexthist = zeros(0,ntextons);
    hgptexthist = zeros(1,ntextons);
    
    numberofhistogramperroi = 100000;% The number of histogram we take per ROI
    if (re_obtain_histogram_data)
        for stromawidthidx = 1:nstromawidth
            stromawidth = stromawidtharr(stromawidthidx);
            disp(['Processing at width = ' num2str(stromawidth)])
            param.glswstd = 25; %Ls and g windows size
            param.stromawidth = stromawidth;
            param.cleftingwidth =90;
            param.basalwidth=10;
            ntextons = 50;
            textonfeat = zeros(0,ntextons);
            iter = 0 ;
            curn3=0;
            curnnm = 0;
            curnbph=0;
            curnhgp = 0;
            numericclass = zeros(0,1);
            g3basaltextonhist=zeros(0,ntextons);
            nmbasaltextonhist=zeros(0,ntextons);
            bphbasaltextonhist=zeros(0,ntextons);
            hgpbasaltextonhist=zeros(0,ntextons);
                      
            for idx=1:max([n3 nm nbph nhgp])
                iter = iter+1;
                %Step 1: count the number of true glands and the number of lumen
                %each gland has
                %First, load the label map and cut out small fused regions. Make
                %sure that a slight fusion will not be detected as fused glands.
                %This seems to have been done in the code that generate the label
                %map.
                if (idx<=n3)
                    curg3filename = strcat(g3folder,g3files(idx).name);
                    dash_pos = find(g3files(idx).name=='_');
                    roi_cord_filename = strcat(g3folder,...
                        g3files(idx).name(1:dash_pos(1)),'coord',g3files(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI
                    roi_cord_filename(end-2:end)='mat';
                    curlabelname = g3files(idx).name(1:(dash_pos(1)-1)); %Label of the roi
                    texton_hist_filename=strcat(texton_hist_folder,curlabelname,'_texton_hist_60.mat');
                    tic;
                    filename2save = strcat(g3folder,...
                        g3files(idx).name(1:dash_pos(1)),'basal_texton_hist',g3files(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI)
                    filename2save(end-2:end)='mat';
                
                    disp(['G3 - ' g3files(idx).name]);
                    if (~exist(filename2save,'file'))
                         res=extract_histogram_from_a_single_core_g3_vs_nm(curg3filename,texton_hist_filename,roi_cord_filename,param);
                                               save(filename2save,'res'); %Save the current response
                    else
                        temp=load(filename2save,'res');
                        res = temp.res;
                    end
                    curnhist=size(res.basalhistdata,1);
                    nhist = min(curnhist,numberofhistogramperroi);
                    sampleidx = randperm(curnhist);
                    g3basaltextonhist(end+1:end+nhist,:) = res.basalhistdata(sampleidx(1:nhist),:);
                    curn3 = curn3+1;
                    tres = toc; disp(['Extraction time ' num2str(tres)]);

                end

                if (idx<=nm)
                    curnmfilename = strcat(nmfolder,nmfiles(idx).name);
                    dash_pos = find(nmfiles(idx).name=='_');
                    roi_cord_filename = strcat(nmfolder,...
                    nmfiles(idx).name(1:dash_pos(1)),'coord',nmfiles(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI
                    roi_cord_filename(end-2:end)='mat';
                    curlabelname = nmfiles(idx).name(1:(dash_pos(1)-1)); %Label of the roi
                    texton_hist_filename=strcat(texton_hist_folder,curlabelname,'_texton_hist_60.mat');
                    tic;
                    filename2save = strcat(nmfolder,...
                        nmfiles(idx).name(1:dash_pos(1)),'basal_texton_hist',nmfiles(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI)
                    filename2save(end-2:end)='mat';
                    disp(['NM - ' nmfiles(idx).name]);
                    if (~exist(filename2save,'file'))
                        res=extract_histogram_from_a_single_core_g3_vs_nm(curnmfilename,texton_hist_filename,roi_cord_filename,param);
                        save(filename2save,'res'); %Save the current response
                    else
                        temp=load(filename2save,'res');
                        res = temp.res;
                    end
                    curnhist=size(res.basalhistdata,1);
                    nhist = min(curnhist,numberofhistogramperroi);
                    sampleidx = randperm(curnhist);                   
                    nmbasaltextonhist(end+1:end+nhist,:) = res.basalhistdata(sampleidx(1:nhist),:);
                    curnnm = curnnm+1;
                    tres = toc; disp(['Extraction time ' num2str(tres)]);

                end
                
                 if (idx<=nbph)
                    curbphfilename = strcat(bphfolder,bphfiles(idx).name);
                    dash_pos = find(bphfiles(idx).name=='_');
                    roi_cord_filename = strcat(bphfolder,...
                        bphfiles(idx).name(1:dash_pos(1)),'coord',bphfiles(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI
                    roi_cord_filename(end-2:end)='mat';
                    curlabelname = bphfiles(idx).name(1:(dash_pos(1)-1)); %Label of the roi
                    texton_hist_filename=strcat(texton_hist_folder,curlabelname,'_texton_hist_60.mat');
                    tic;
                    filename2save = strcat(bphfolder,...
                        bphfiles(idx).name(1:dash_pos(1)),'basal_texton_hist',bphfiles(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI)
                    filename2save(end-2:end)='mat';
                
                    disp(['BPH - ' bphfiles(idx).name]);
                    if (~exist(filename2save,'file'))
                         res=extract_histogram_from_a_single_core_g3_vs_nm(curbphfilename,texton_hist_filename,roi_cord_filename,param);
                                               save(filename2save,'res'); %Save the current response
                    else
                        temp=load(filename2save,'res');
                        res = temp.res;
                    end
                    curnhist=size(res.basalhistdata,1);
                    nhist = min(curnhist,numberofhistogramperroi);
                    sampleidx = randperm(curnhist);
                    bphbasaltextonhist(end+1:end+nhist,:) = res.basalhistdata(sampleidx(1:nhist),:);
                    curnbph = curnbph+1;
                    tres = toc; disp(['Extraction time ' num2str(tres)]);

                 end
                
                  if (idx<=nhgp)
                    curhgpfilename = strcat(hgpfolder,hgpfiles(idx).name);
                    dash_pos = find(hgpfiles(idx).name=='_');
                    roi_cord_filename = strcat(hgpfolder,...
                        hgpfiles(idx).name(1:dash_pos(1)),'coord',hgpfiles(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI
                    roi_cord_filename(end-2:end)='mat';
                    curlabelname = hgpfiles(idx).name(1:(dash_pos(1)-1)); %Label of the roi
                    texton_hist_filename=strcat(texton_hist_folder,curlabelname,'_texton_hist_60.mat');
                    tic;
                    filename2save = strcat(hgpfolder,...
                        hgpfiles(idx).name(1:dash_pos(1)),'basal_texton_hist',hgpfiles(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI)
                    filename2save(end-2:end)='mat';
                
                    disp(['hgp - ' hgpfiles(idx).name]);
                    if (~exist(filename2save,'file'))
                         res=extract_histogram_from_a_single_core_g3_vs_nm(curhgpfilename,texton_hist_filename,roi_cord_filename,param);
                                               save(filename2save,'res'); %Save the current response
                    else
                        temp=load(filename2save,'res');
                        res = temp.res;
                    end
                    curnhist=size(res.basalhistdata,1);
                    nhist = min(curnhist,numberofhistogramperroi);
                    sampleidx = randperm(curnhist);
                    hgpbasaltextonhist(end+1:end+nhist,:) = res.basalhistdata(sampleidx(1:nhist),:);
                    curnhgp = curnhgp+1;
                    tres = toc; disp(['Extraction time ' num2str(tres)]);

                end

            end
            save(strcat(texton_hist_folder,'basal_texton_hist_60_.mat'),'nmbasaltextonhist',...
                'hgpbasaltextonhist','bphbasaltextonhist','g3basaltextonhist','-v7.3')
        end
    end
    
    recomputecov =0;
    nhistperclass = 10000000;
    if ((~exist(strcat(texton_hist_folder,'basal_lda.mat')))|(recomputecov))
         %Next, load the data and perform LDA analysis
        res = load(strcat(texton_hist_folder,'basal_texton_hist_60_.mat'),'nmbasaltextonhist');
        nmdata = res.nmbasaltextonhist;
        nmdata = nmdata(1:min(size(nmdata,1),nhistperclass),:);
        clear res;
        nmmu = mean(nmdata,1);nmmu = nmmu(:);
        nmcov = cov(nmdata);
        nmnsamples = size(nmdata,1);
        clear nmdata;

        res = load(strcat(texton_hist_folder,'basal_texton_hist_60_.mat'),'g3basaltextonhist');
        g3data = res.g3basaltextonhist;
        g3data = g3data(1:min(size(g3data,1),nhistperclass),:);
        clear res;
        g3mu = mean(g3data,1);g3mu = g3mu(:);
        g3cov = cov(g3data);
        g3nsamples = size(g3data,1);

        res = load(strcat(texton_hist_folder,'basal_texton_hist_60_.mat'),'bphbasaltextonhist');
        bphdata = res.bphbasaltextonhist;
        bphdata = bphdata(1:min(size(bphdata,1),nhistperclass),:);
        clear res;
        bphmu = mean(bphdata,1);bphmu = bphmu(:);
        bphcov = cov(bphdata);
        bphnsamples = size(bphdata,1);
        
        res = load(strcat(texton_hist_folder,'basal_texton_hist_60_.mat'),'hgpbasaltextonhist');
        hgpdata = res.hgpbasaltextonhist;
        hgpdata = hgpdata(1:min(size(hgpdata,1),nhistperclass),:);
        clear res;
        hgpmu = mean(bphdata,1);hgpmu = hgpmu(:);
        hgpcov = cov(bphdata);
        hgpnsamples = size(hgpdata,1);
        
        sw = g3cov + nmcov;
        sb = (g3mu-nmmu)*(g3mu-nmmu)';
        [v,d]=eig(inv(sw)*sb);
        save(strcat(texton_hist_folder,'basal_lda.mat'),'v','d','g3mu','nmmu','bphmu','hgpmu','g3cov','nmcov','hgpcov','bphcov');
    else
        load(strcat(texton_hist_folder,'basal_lda.mat'));
    end
   
     %Now, go over all the cores and draw the projection of the histogram.
     %The numeric value will show locations that is significantly different
     w=v(:,1);
     for idx=1:max([n3 nm nbph nhgp])
                if (idx<=n3)
                    curg3filename = strcat(g3folder,g3files(idx).name);
                    dash_pos = find(g3files(idx).name=='_');
                    filename2read = strcat(g3folder,...
                        g3files(idx).name(1:dash_pos(1)),'basal_texton_hist',g3files(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI)
                    filename2read(end-2:end)='mat';
                    phaseimname = strcat(g3folder,...
                        g3files(idx).name(1:dash_pos(1)),'small',g3files(idx).name(dash_pos(2):end));
                    
                    disp(['G3 - ' g3files(idx).name]);
                    temp=load(filename2read,'res');
                    res = temp.res;
                    projdata = w'*res.basalhistdata';
                    positivepart = length(find(projdata>=80))/length(projdata);
                    negativepart = length(find(projdata<=-30))/length(projdata);
                    figure(2);hold on; plot(positivepart,negativepart,'*r');axis([0 1 0 1]);
                    phasemap = imresize(single(imread(phaseimname)),[res.nrows,res.ncols])/65535.0;
                    newmap=phasemap;
                    newmap(res.basalidx)=(projdata+150)/350*0.8;%Max is about -150 min is about 250
                    overlaidmap = zeros(res.nrows,res.ncols,3);
                    overlaidmap(:,:,2)=phasemap;
                    overlaidmap(:,:,3)=phasemap;
                    overlaidmap(:,:,1)=(newmap); 
                    
                    figure(1);
                    subplot(221);imshow(overlaidmap);title('G3');drawnow;
                    filename2save = strcat(g3folder,...
                        g3files(idx).name(1:dash_pos(1)),'basal_heat_map',g3files(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI)
                    %writeTIFF(heatmap,filename2save);
                    options.color = true;
                    saveastiff(uint8(overlaidmap*256), filename2save, options);
                end

                if (idx<=nm)
                    curnmfilename = strcat(nmfolder,nmfiles(idx).name);
                    dash_pos = find(nmfiles(idx).name=='_');                    
                    filename2read = strcat(nmfolder,...
                        nmfiles(idx).name(1:dash_pos(1)),'basal_texton_hist',nmfiles(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI)
                    filename2read(end-2:end)='mat';
                    phaseimname = strcat(nmfolder,...
                        nmfiles(idx).name(1:dash_pos(1)),'small',nmfiles(idx).name(dash_pos(2):end));
                
                    disp(['NM - ' nmfiles(idx).name]);
                    if (exist(filename2read))
                        temp=load(filename2read,'res');
                        res = temp.res;
                        projdata = w'*res.basalhistdata';
                        positivepart = length(find(projdata>=80))/length(projdata);
                        negativepart = length(find(projdata<=-30))/length(projdata);
                        figure(2);hold on; plot(positivepart,negativepart,'ob');axis([0 1 0 1]);

                        phasemap = imresize(single(imread(phaseimname)),[res.nrows,res.ncols])/65535.0;
                        newmap=phasemap;
                        newmap(res.basalidx)=(projdata+150)/350*0.8;%Max is about -150 min is about 250
                        overlaidmap = zeros(res.nrows,res.ncols,3);
                        overlaidmap(:,:,2)=phasemap;
                        overlaidmap(:,:,3)=phasemap;
                        overlaidmap(:,:,1)=(newmap); 
                        figure(1);
                        subplot(222);imshow(overlaidmap);title('Normal')
                        filename2save = strcat(nmfolder,...
                            nmfiles(idx).name(1:dash_pos(1)),'basal_heat_map',nmfiles(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI)
                        %writeTIFF(newmap,filename2save);    
                        options.color = true;
                        saveastiff(uint8(overlaidmap*256), filename2save, options);
                    end
                end
                
                if (idx<=nhgp)
                    curhgpfilename = strcat(hgpfolder,hgpfiles(idx).name);
                    dash_pos = find(hgpfiles(idx).name=='_');
                    filename2read = strcat(hgpfolder,...
                        hgpfiles(idx).name(1:dash_pos(1)),'basal_texton_hist',hgpfiles(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI)
                    filename2read(end-2:end)='mat';
                    phaseimname = strcat(hgpfolder,...
                        hgpfiles(idx).name(1:dash_pos(1)),'small',hgpfiles(idx).name(dash_pos(2):end));
                    
                    disp(['HGP - ' hgpfiles(idx).name]);
                    temp=load(filename2read,'res');
                    res = temp.res;
                    projdata = w'*res.basalhistdata';
                    positivepart = length(find(projdata>=80))/length(projdata);
                    negativepart = length(find(projdata<=-30))/length(projdata);
                    figure(2);hold on; plot(positivepart,negativepart,'^g');axis([0 1 0 1]);
                    phasemap = imresize(single(imread(phaseimname)),[res.nrows,res.ncols])/65535.0;
                    newmap=phasemap;
                    newmap(res.basalidx)=(projdata+150)/350*0.8;%Max is about -150 min is about 250
                    overlaidmap = zeros(res.nrows,res.ncols,3);
                    overlaidmap(:,:,2)=phasemap;
                    overlaidmap(:,:,3)=phasemap;
                    overlaidmap(:,:,1)=(newmap); 
                    
                    figure(1);
                    subplot(223);imshow(overlaidmap);title('HGP');drawnow;
                    filename2save = strcat(hgpfolder,...
                        hgpfiles(idx).name(1:dash_pos(1)),'basal_heat_map',hgpfiles(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI)
                    %writeTIFF(heatmap,filename2save);
                    options.color = true;
                    saveastiff(uint8(overlaidmap*256), filename2save, options);
                end
                
                 if (idx<=nbph)
                    curbphfilename = strcat(bphfolder,bphfiles(idx).name);
                    dash_pos = find(bphfiles(idx).name=='_');                    
                    filename2read = strcat(nmfolder,...
                        bhfiles(idx).name(1:dash_pos(1)),'basal_texton_hist',nmfiles(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI)
                    filename2read(end-2:end)='mat';
                    phaseimname = strcat(nmfolder,...
                        nmfiles(idx).name(1:dash_pos(1)),'small',nmfiles(idx).name(dash_pos(2):end));
                
                    disp(['NM - ' nmfiles(idx).name]);
                    if (exist(filename2read))
                        temp=load(filename2read,'res');
                        res = temp.res;
                        projdata = w'*res.basalhistdata';
                        positivepart = length(find(projdata>=80))/length(projdata);
                        negativepart = length(find(projdata<=-30))/length(projdata);
                        figure(2);hold on; plot(positivepart,negativepart,'ob');axis([0 1 0 1]);

                        phasemap = imresize(single(imread(phaseimname)),[res.nrows,res.ncols])/65535.0;
                        newmap=phasemap;
                        newmap(res.basalidx)=(projdata+150)/350*0.8;%Max is about -150 min is about 250
                        overlaidmap = zeros(res.nrows,res.ncols,3);
                        overlaidmap(:,:,2)=phasemap;
                        overlaidmap(:,:,3)=phasemap;
                        overlaidmap(:,:,1)=(newmap); 
                        figure(1);
                        subplot(222);imshow(overlaidmap);title('Normal')
                        filename2save = strcat(nmfolder,...
                            nmfiles(idx).name(1:dash_pos(1)),'basal_heat_map',nmfiles(idx).name(dash_pos(2):end));%Coordinates of the region to extract the ROI)
                        %writeTIFF(newmap,filename2save);    
                        options.color = true;
                        saveastiff(uint8(overlaidmap*256), filename2save, options);
                    end
                end

     end

    
    
